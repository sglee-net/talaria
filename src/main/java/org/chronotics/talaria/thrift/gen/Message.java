/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.chronotics.talaria.thrift.gen;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2018-06-17")
public class Message implements org.apache.thrift.TBase<Message, Message._Fields>, java.io.Serializable, Cloneable, Comparable<Message> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Message");

  private static final org.apache.thrift.protocol.TField _TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("_timestamp", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField _SENDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_sender_id", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField _RECEIVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_receiver_id", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField _SUBJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("_subject", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField _SEQUENCE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("_sequence_no", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField _LIST_BOOL_FIELD_DESC = new org.apache.thrift.protocol.TField("_list_bool", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField _LIST_I16_FIELD_DESC = new org.apache.thrift.protocol.TField("_list_i16", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField _LIST_I32_FIELD_DESC = new org.apache.thrift.protocol.TField("_list_i32", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField _LIST_I64_FIELD_DESC = new org.apache.thrift.protocol.TField("_list_i64", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField _LIST_DOUBLE_FIELD_DESC = new org.apache.thrift.protocol.TField("_list_double", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField _LIST_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("_list_string", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField _BINARY_FIELD_DESC = new org.apache.thrift.protocol.TField("_binary", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField _PAYLOAD_FIELD_DESC = new org.apache.thrift.protocol.TField("_payload", org.apache.thrift.protocol.TType.STRING, (short)13);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MessageStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MessageTupleSchemeFactory();

  public java.lang.String _timestamp; // required
  public java.lang.String _sender_id; // required
  public java.lang.String _receiver_id; // optional
  public java.lang.String _subject; // optional
  public long _sequence_no; // optional
  public java.util.List<java.lang.Boolean> _list_bool; // optional
  public java.util.List<java.lang.Short> _list_i16; // optional
  public java.util.List<java.lang.Integer> _list_i32; // optional
  public java.util.List<java.lang.Long> _list_i64; // optional
  public java.util.List<java.lang.Double> _list_double; // optional
  public java.util.List<java.lang.String> _list_string; // optional
  public java.nio.ByteBuffer _binary; // optional
  public java.lang.String _payload; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    _TIMESTAMP((short)1, "_timestamp"),
    _SENDER_ID((short)2, "_sender_id"),
    _RECEIVER_ID((short)3, "_receiver_id"),
    _SUBJECT((short)4, "_subject"),
    _SEQUENCE_NO((short)5, "_sequence_no"),
    _LIST_BOOL((short)6, "_list_bool"),
    _LIST_I16((short)7, "_list_i16"),
    _LIST_I32((short)8, "_list_i32"),
    _LIST_I64((short)9, "_list_i64"),
    _LIST_DOUBLE((short)10, "_list_double"),
    _LIST_STRING((short)11, "_list_string"),
    _BINARY((short)12, "_binary"),
    _PAYLOAD((short)13, "_payload");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // _TIMESTAMP
          return _TIMESTAMP;
        case 2: // _SENDER_ID
          return _SENDER_ID;
        case 3: // _RECEIVER_ID
          return _RECEIVER_ID;
        case 4: // _SUBJECT
          return _SUBJECT;
        case 5: // _SEQUENCE_NO
          return _SEQUENCE_NO;
        case 6: // _LIST_BOOL
          return _LIST_BOOL;
        case 7: // _LIST_I16
          return _LIST_I16;
        case 8: // _LIST_I32
          return _LIST_I32;
        case 9: // _LIST_I64
          return _LIST_I64;
        case 10: // _LIST_DOUBLE
          return _LIST_DOUBLE;
        case 11: // _LIST_STRING
          return _LIST_STRING;
        case 12: // _BINARY
          return _BINARY;
        case 13: // _PAYLOAD
          return _PAYLOAD;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int ___SEQUENCE_NO_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields._RECEIVER_ID,_Fields._SUBJECT,_Fields._SEQUENCE_NO,_Fields._LIST_BOOL,_Fields._LIST_I16,_Fields._LIST_I32,_Fields._LIST_I64,_Fields._LIST_DOUBLE,_Fields._LIST_STRING,_Fields._BINARY,_Fields._PAYLOAD};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields._TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("_timestamp", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._SENDER_ID, new org.apache.thrift.meta_data.FieldMetaData("_sender_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._RECEIVER_ID, new org.apache.thrift.meta_data.FieldMetaData("_receiver_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._SUBJECT, new org.apache.thrift.meta_data.FieldMetaData("_subject", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._SEQUENCE_NO, new org.apache.thrift.meta_data.FieldMetaData("_sequence_no", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields._LIST_BOOL, new org.apache.thrift.meta_data.FieldMetaData("_list_bool", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
    tmpMap.put(_Fields._LIST_I16, new org.apache.thrift.meta_data.FieldMetaData("_list_i16", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
    tmpMap.put(_Fields._LIST_I32, new org.apache.thrift.meta_data.FieldMetaData("_list_i32", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields._LIST_I64, new org.apache.thrift.meta_data.FieldMetaData("_list_i64", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields._LIST_DOUBLE, new org.apache.thrift.meta_data.FieldMetaData("_list_double", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields._LIST_STRING, new org.apache.thrift.meta_data.FieldMetaData("_list_string", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields._BINARY, new org.apache.thrift.meta_data.FieldMetaData("_binary", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields._PAYLOAD, new org.apache.thrift.meta_data.FieldMetaData("_payload", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Message.class, metaDataMap);
  }

  public Message() {
  }

  public Message(
    java.lang.String _timestamp,
    java.lang.String _sender_id)
  {
    this();
    this._timestamp = _timestamp;
    this._sender_id = _sender_id;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Message(Message other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSet_timestamp()) {
      this._timestamp = other._timestamp;
    }
    if (other.isSet_sender_id()) {
      this._sender_id = other._sender_id;
    }
    if (other.isSet_receiver_id()) {
      this._receiver_id = other._receiver_id;
    }
    if (other.isSet_subject()) {
      this._subject = other._subject;
    }
    this._sequence_no = other._sequence_no;
    if (other.isSet_list_bool()) {
      java.util.List<java.lang.Boolean> __this___list_bool = new java.util.ArrayList<java.lang.Boolean>(other._list_bool);
      this._list_bool = __this___list_bool;
    }
    if (other.isSet_list_i16()) {
      java.util.List<java.lang.Short> __this___list_i16 = new java.util.ArrayList<java.lang.Short>(other._list_i16);
      this._list_i16 = __this___list_i16;
    }
    if (other.isSet_list_i32()) {
      java.util.List<java.lang.Integer> __this___list_i32 = new java.util.ArrayList<java.lang.Integer>(other._list_i32);
      this._list_i32 = __this___list_i32;
    }
    if (other.isSet_list_i64()) {
      java.util.List<java.lang.Long> __this___list_i64 = new java.util.ArrayList<java.lang.Long>(other._list_i64);
      this._list_i64 = __this___list_i64;
    }
    if (other.isSet_list_double()) {
      java.util.List<java.lang.Double> __this___list_double = new java.util.ArrayList<java.lang.Double>(other._list_double);
      this._list_double = __this___list_double;
    }
    if (other.isSet_list_string()) {
      java.util.List<java.lang.String> __this___list_string = new java.util.ArrayList<java.lang.String>(other._list_string);
      this._list_string = __this___list_string;
    }
    if (other.isSet_binary()) {
      this._binary = org.apache.thrift.TBaseHelper.copyBinary(other._binary);
    }
    if (other.isSet_payload()) {
      this._payload = other._payload;
    }
  }

  public Message deepCopy() {
    return new Message(this);
  }

  @Override
  public void clear() {
    this._timestamp = null;
    this._sender_id = null;
    this._receiver_id = null;
    this._subject = null;
    set_sequence_noIsSet(false);
    this._sequence_no = 0;
    this._list_bool = null;
    this._list_i16 = null;
    this._list_i32 = null;
    this._list_i64 = null;
    this._list_double = null;
    this._list_string = null;
    this._binary = null;
    this._payload = null;
  }

  public java.lang.String get_timestamp() {
    return this._timestamp;
  }

  public Message set_timestamp(java.lang.String _timestamp) {
    this._timestamp = _timestamp;
    return this;
  }

  public void unset_timestamp() {
    this._timestamp = null;
  }

  /** Returns true if field _timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSet_timestamp() {
    return this._timestamp != null;
  }

  public void set_timestampIsSet(boolean value) {
    if (!value) {
      this._timestamp = null;
    }
  }

  public java.lang.String get_sender_id() {
    return this._sender_id;
  }

  public Message set_sender_id(java.lang.String _sender_id) {
    this._sender_id = _sender_id;
    return this;
  }

  public void unset_sender_id() {
    this._sender_id = null;
  }

  /** Returns true if field _sender_id is set (has been assigned a value) and false otherwise */
  public boolean isSet_sender_id() {
    return this._sender_id != null;
  }

  public void set_sender_idIsSet(boolean value) {
    if (!value) {
      this._sender_id = null;
    }
  }

  public java.lang.String get_receiver_id() {
    return this._receiver_id;
  }

  public Message set_receiver_id(java.lang.String _receiver_id) {
    this._receiver_id = _receiver_id;
    return this;
  }

  public void unset_receiver_id() {
    this._receiver_id = null;
  }

  /** Returns true if field _receiver_id is set (has been assigned a value) and false otherwise */
  public boolean isSet_receiver_id() {
    return this._receiver_id != null;
  }

  public void set_receiver_idIsSet(boolean value) {
    if (!value) {
      this._receiver_id = null;
    }
  }

  public java.lang.String get_subject() {
    return this._subject;
  }

  public Message set_subject(java.lang.String _subject) {
    this._subject = _subject;
    return this;
  }

  public void unset_subject() {
    this._subject = null;
  }

  /** Returns true if field _subject is set (has been assigned a value) and false otherwise */
  public boolean isSet_subject() {
    return this._subject != null;
  }

  public void set_subjectIsSet(boolean value) {
    if (!value) {
      this._subject = null;
    }
  }

  public long get_sequence_no() {
    return this._sequence_no;
  }

  public Message set_sequence_no(long _sequence_no) {
    this._sequence_no = _sequence_no;
    set_sequence_noIsSet(true);
    return this;
  }

  public void unset_sequence_no() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___SEQUENCE_NO_ISSET_ID);
  }

  /** Returns true if field _sequence_no is set (has been assigned a value) and false otherwise */
  public boolean isSet_sequence_no() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___SEQUENCE_NO_ISSET_ID);
  }

  public void set_sequence_noIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___SEQUENCE_NO_ISSET_ID, value);
  }

  public int get_list_boolSize() {
    return (this._list_bool == null) ? 0 : this._list_bool.size();
  }

  public java.util.Iterator<java.lang.Boolean> get_list_boolIterator() {
    return (this._list_bool == null) ? null : this._list_bool.iterator();
  }

  public void addTo_list_bool(boolean elem) {
    if (this._list_bool == null) {
      this._list_bool = new java.util.ArrayList<java.lang.Boolean>();
    }
    this._list_bool.add(elem);
  }

  public java.util.List<java.lang.Boolean> get_list_bool() {
    return this._list_bool;
  }

  public Message set_list_bool(java.util.List<java.lang.Boolean> _list_bool) {
    this._list_bool = _list_bool;
    return this;
  }

  public void unset_list_bool() {
    this._list_bool = null;
  }

  /** Returns true if field _list_bool is set (has been assigned a value) and false otherwise */
  public boolean isSet_list_bool() {
    return this._list_bool != null;
  }

  public void set_list_boolIsSet(boolean value) {
    if (!value) {
      this._list_bool = null;
    }
  }

  public int get_list_i16Size() {
    return (this._list_i16 == null) ? 0 : this._list_i16.size();
  }

  public java.util.Iterator<java.lang.Short> get_list_i16Iterator() {
    return (this._list_i16 == null) ? null : this._list_i16.iterator();
  }

  public void addTo_list_i16(short elem) {
    if (this._list_i16 == null) {
      this._list_i16 = new java.util.ArrayList<java.lang.Short>();
    }
    this._list_i16.add(elem);
  }

  public java.util.List<java.lang.Short> get_list_i16() {
    return this._list_i16;
  }

  public Message set_list_i16(java.util.List<java.lang.Short> _list_i16) {
    this._list_i16 = _list_i16;
    return this;
  }

  public void unset_list_i16() {
    this._list_i16 = null;
  }

  /** Returns true if field _list_i16 is set (has been assigned a value) and false otherwise */
  public boolean isSet_list_i16() {
    return this._list_i16 != null;
  }

  public void set_list_i16IsSet(boolean value) {
    if (!value) {
      this._list_i16 = null;
    }
  }

  public int get_list_i32Size() {
    return (this._list_i32 == null) ? 0 : this._list_i32.size();
  }

  public java.util.Iterator<java.lang.Integer> get_list_i32Iterator() {
    return (this._list_i32 == null) ? null : this._list_i32.iterator();
  }

  public void addTo_list_i32(int elem) {
    if (this._list_i32 == null) {
      this._list_i32 = new java.util.ArrayList<java.lang.Integer>();
    }
    this._list_i32.add(elem);
  }

  public java.util.List<java.lang.Integer> get_list_i32() {
    return this._list_i32;
  }

  public Message set_list_i32(java.util.List<java.lang.Integer> _list_i32) {
    this._list_i32 = _list_i32;
    return this;
  }

  public void unset_list_i32() {
    this._list_i32 = null;
  }

  /** Returns true if field _list_i32 is set (has been assigned a value) and false otherwise */
  public boolean isSet_list_i32() {
    return this._list_i32 != null;
  }

  public void set_list_i32IsSet(boolean value) {
    if (!value) {
      this._list_i32 = null;
    }
  }

  public int get_list_i64Size() {
    return (this._list_i64 == null) ? 0 : this._list_i64.size();
  }

  public java.util.Iterator<java.lang.Long> get_list_i64Iterator() {
    return (this._list_i64 == null) ? null : this._list_i64.iterator();
  }

  public void addTo_list_i64(long elem) {
    if (this._list_i64 == null) {
      this._list_i64 = new java.util.ArrayList<java.lang.Long>();
    }
    this._list_i64.add(elem);
  }

  public java.util.List<java.lang.Long> get_list_i64() {
    return this._list_i64;
  }

  public Message set_list_i64(java.util.List<java.lang.Long> _list_i64) {
    this._list_i64 = _list_i64;
    return this;
  }

  public void unset_list_i64() {
    this._list_i64 = null;
  }

  /** Returns true if field _list_i64 is set (has been assigned a value) and false otherwise */
  public boolean isSet_list_i64() {
    return this._list_i64 != null;
  }

  public void set_list_i64IsSet(boolean value) {
    if (!value) {
      this._list_i64 = null;
    }
  }

  public int get_list_doubleSize() {
    return (this._list_double == null) ? 0 : this._list_double.size();
  }

  public java.util.Iterator<java.lang.Double> get_list_doubleIterator() {
    return (this._list_double == null) ? null : this._list_double.iterator();
  }

  public void addTo_list_double(double elem) {
    if (this._list_double == null) {
      this._list_double = new java.util.ArrayList<java.lang.Double>();
    }
    this._list_double.add(elem);
  }

  public java.util.List<java.lang.Double> get_list_double() {
    return this._list_double;
  }

  public Message set_list_double(java.util.List<java.lang.Double> _list_double) {
    this._list_double = _list_double;
    return this;
  }

  public void unset_list_double() {
    this._list_double = null;
  }

  /** Returns true if field _list_double is set (has been assigned a value) and false otherwise */
  public boolean isSet_list_double() {
    return this._list_double != null;
  }

  public void set_list_doubleIsSet(boolean value) {
    if (!value) {
      this._list_double = null;
    }
  }

  public int get_list_stringSize() {
    return (this._list_string == null) ? 0 : this._list_string.size();
  }

  public java.util.Iterator<java.lang.String> get_list_stringIterator() {
    return (this._list_string == null) ? null : this._list_string.iterator();
  }

  public void addTo_list_string(java.lang.String elem) {
    if (this._list_string == null) {
      this._list_string = new java.util.ArrayList<java.lang.String>();
    }
    this._list_string.add(elem);
  }

  public java.util.List<java.lang.String> get_list_string() {
    return this._list_string;
  }

  public Message set_list_string(java.util.List<java.lang.String> _list_string) {
    this._list_string = _list_string;
    return this;
  }

  public void unset_list_string() {
    this._list_string = null;
  }

  /** Returns true if field _list_string is set (has been assigned a value) and false otherwise */
  public boolean isSet_list_string() {
    return this._list_string != null;
  }

  public void set_list_stringIsSet(boolean value) {
    if (!value) {
      this._list_string = null;
    }
  }

  public byte[] get_binary() {
    set_binary(org.apache.thrift.TBaseHelper.rightSize(_binary));
    return _binary == null ? null : _binary.array();
  }

  public java.nio.ByteBuffer bufferFor_binary() {
    return org.apache.thrift.TBaseHelper.copyBinary(_binary);
  }

  public Message set_binary(byte[] _binary) {
    this._binary = _binary == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(_binary.clone());
    return this;
  }

  public Message set_binary(java.nio.ByteBuffer _binary) {
    this._binary = org.apache.thrift.TBaseHelper.copyBinary(_binary);
    return this;
  }

  public void unset_binary() {
    this._binary = null;
  }

  /** Returns true if field _binary is set (has been assigned a value) and false otherwise */
  public boolean isSet_binary() {
    return this._binary != null;
  }

  public void set_binaryIsSet(boolean value) {
    if (!value) {
      this._binary = null;
    }
  }

  public java.lang.String get_payload() {
    return this._payload;
  }

  public Message set_payload(java.lang.String _payload) {
    this._payload = _payload;
    return this;
  }

  public void unset_payload() {
    this._payload = null;
  }

  /** Returns true if field _payload is set (has been assigned a value) and false otherwise */
  public boolean isSet_payload() {
    return this._payload != null;
  }

  public void set_payloadIsSet(boolean value) {
    if (!value) {
      this._payload = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case _TIMESTAMP:
      if (value == null) {
        unset_timestamp();
      } else {
        set_timestamp((java.lang.String)value);
      }
      break;

    case _SENDER_ID:
      if (value == null) {
        unset_sender_id();
      } else {
        set_sender_id((java.lang.String)value);
      }
      break;

    case _RECEIVER_ID:
      if (value == null) {
        unset_receiver_id();
      } else {
        set_receiver_id((java.lang.String)value);
      }
      break;

    case _SUBJECT:
      if (value == null) {
        unset_subject();
      } else {
        set_subject((java.lang.String)value);
      }
      break;

    case _SEQUENCE_NO:
      if (value == null) {
        unset_sequence_no();
      } else {
        set_sequence_no((java.lang.Long)value);
      }
      break;

    case _LIST_BOOL:
      if (value == null) {
        unset_list_bool();
      } else {
        set_list_bool((java.util.List<java.lang.Boolean>)value);
      }
      break;

    case _LIST_I16:
      if (value == null) {
        unset_list_i16();
      } else {
        set_list_i16((java.util.List<java.lang.Short>)value);
      }
      break;

    case _LIST_I32:
      if (value == null) {
        unset_list_i32();
      } else {
        set_list_i32((java.util.List<java.lang.Integer>)value);
      }
      break;

    case _LIST_I64:
      if (value == null) {
        unset_list_i64();
      } else {
        set_list_i64((java.util.List<java.lang.Long>)value);
      }
      break;

    case _LIST_DOUBLE:
      if (value == null) {
        unset_list_double();
      } else {
        set_list_double((java.util.List<java.lang.Double>)value);
      }
      break;

    case _LIST_STRING:
      if (value == null) {
        unset_list_string();
      } else {
        set_list_string((java.util.List<java.lang.String>)value);
      }
      break;

    case _BINARY:
      if (value == null) {
        unset_binary();
      } else {
        if (value instanceof byte[]) {
          set_binary((byte[])value);
        } else {
          set_binary((java.nio.ByteBuffer)value);
        }
      }
      break;

    case _PAYLOAD:
      if (value == null) {
        unset_payload();
      } else {
        set_payload((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case _TIMESTAMP:
      return get_timestamp();

    case _SENDER_ID:
      return get_sender_id();

    case _RECEIVER_ID:
      return get_receiver_id();

    case _SUBJECT:
      return get_subject();

    case _SEQUENCE_NO:
      return get_sequence_no();

    case _LIST_BOOL:
      return get_list_bool();

    case _LIST_I16:
      return get_list_i16();

    case _LIST_I32:
      return get_list_i32();

    case _LIST_I64:
      return get_list_i64();

    case _LIST_DOUBLE:
      return get_list_double();

    case _LIST_STRING:
      return get_list_string();

    case _BINARY:
      return get_binary();

    case _PAYLOAD:
      return get_payload();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case _TIMESTAMP:
      return isSet_timestamp();
    case _SENDER_ID:
      return isSet_sender_id();
    case _RECEIVER_ID:
      return isSet_receiver_id();
    case _SUBJECT:
      return isSet_subject();
    case _SEQUENCE_NO:
      return isSet_sequence_no();
    case _LIST_BOOL:
      return isSet_list_bool();
    case _LIST_I16:
      return isSet_list_i16();
    case _LIST_I32:
      return isSet_list_i32();
    case _LIST_I64:
      return isSet_list_i64();
    case _LIST_DOUBLE:
      return isSet_list_double();
    case _LIST_STRING:
      return isSet_list_string();
    case _BINARY:
      return isSet_binary();
    case _PAYLOAD:
      return isSet_payload();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Message)
      return this.equals((Message)that);
    return false;
  }

  public boolean equals(Message that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present__timestamp = true && this.isSet_timestamp();
    boolean that_present__timestamp = true && that.isSet_timestamp();
    if (this_present__timestamp || that_present__timestamp) {
      if (!(this_present__timestamp && that_present__timestamp))
        return false;
      if (!this._timestamp.equals(that._timestamp))
        return false;
    }

    boolean this_present__sender_id = true && this.isSet_sender_id();
    boolean that_present__sender_id = true && that.isSet_sender_id();
    if (this_present__sender_id || that_present__sender_id) {
      if (!(this_present__sender_id && that_present__sender_id))
        return false;
      if (!this._sender_id.equals(that._sender_id))
        return false;
    }

    boolean this_present__receiver_id = true && this.isSet_receiver_id();
    boolean that_present__receiver_id = true && that.isSet_receiver_id();
    if (this_present__receiver_id || that_present__receiver_id) {
      if (!(this_present__receiver_id && that_present__receiver_id))
        return false;
      if (!this._receiver_id.equals(that._receiver_id))
        return false;
    }

    boolean this_present__subject = true && this.isSet_subject();
    boolean that_present__subject = true && that.isSet_subject();
    if (this_present__subject || that_present__subject) {
      if (!(this_present__subject && that_present__subject))
        return false;
      if (!this._subject.equals(that._subject))
        return false;
    }

    boolean this_present__sequence_no = true && this.isSet_sequence_no();
    boolean that_present__sequence_no = true && that.isSet_sequence_no();
    if (this_present__sequence_no || that_present__sequence_no) {
      if (!(this_present__sequence_no && that_present__sequence_no))
        return false;
      if (this._sequence_no != that._sequence_no)
        return false;
    }

    boolean this_present__list_bool = true && this.isSet_list_bool();
    boolean that_present__list_bool = true && that.isSet_list_bool();
    if (this_present__list_bool || that_present__list_bool) {
      if (!(this_present__list_bool && that_present__list_bool))
        return false;
      if (!this._list_bool.equals(that._list_bool))
        return false;
    }

    boolean this_present__list_i16 = true && this.isSet_list_i16();
    boolean that_present__list_i16 = true && that.isSet_list_i16();
    if (this_present__list_i16 || that_present__list_i16) {
      if (!(this_present__list_i16 && that_present__list_i16))
        return false;
      if (!this._list_i16.equals(that._list_i16))
        return false;
    }

    boolean this_present__list_i32 = true && this.isSet_list_i32();
    boolean that_present__list_i32 = true && that.isSet_list_i32();
    if (this_present__list_i32 || that_present__list_i32) {
      if (!(this_present__list_i32 && that_present__list_i32))
        return false;
      if (!this._list_i32.equals(that._list_i32))
        return false;
    }

    boolean this_present__list_i64 = true && this.isSet_list_i64();
    boolean that_present__list_i64 = true && that.isSet_list_i64();
    if (this_present__list_i64 || that_present__list_i64) {
      if (!(this_present__list_i64 && that_present__list_i64))
        return false;
      if (!this._list_i64.equals(that._list_i64))
        return false;
    }

    boolean this_present__list_double = true && this.isSet_list_double();
    boolean that_present__list_double = true && that.isSet_list_double();
    if (this_present__list_double || that_present__list_double) {
      if (!(this_present__list_double && that_present__list_double))
        return false;
      if (!this._list_double.equals(that._list_double))
        return false;
    }

    boolean this_present__list_string = true && this.isSet_list_string();
    boolean that_present__list_string = true && that.isSet_list_string();
    if (this_present__list_string || that_present__list_string) {
      if (!(this_present__list_string && that_present__list_string))
        return false;
      if (!this._list_string.equals(that._list_string))
        return false;
    }

    boolean this_present__binary = true && this.isSet_binary();
    boolean that_present__binary = true && that.isSet_binary();
    if (this_present__binary || that_present__binary) {
      if (!(this_present__binary && that_present__binary))
        return false;
      if (!this._binary.equals(that._binary))
        return false;
    }

    boolean this_present__payload = true && this.isSet_payload();
    boolean that_present__payload = true && that.isSet_payload();
    if (this_present__payload || that_present__payload) {
      if (!(this_present__payload && that_present__payload))
        return false;
      if (!this._payload.equals(that._payload))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSet_timestamp()) ? 131071 : 524287);
    if (isSet_timestamp())
      hashCode = hashCode * 8191 + _timestamp.hashCode();

    hashCode = hashCode * 8191 + ((isSet_sender_id()) ? 131071 : 524287);
    if (isSet_sender_id())
      hashCode = hashCode * 8191 + _sender_id.hashCode();

    hashCode = hashCode * 8191 + ((isSet_receiver_id()) ? 131071 : 524287);
    if (isSet_receiver_id())
      hashCode = hashCode * 8191 + _receiver_id.hashCode();

    hashCode = hashCode * 8191 + ((isSet_subject()) ? 131071 : 524287);
    if (isSet_subject())
      hashCode = hashCode * 8191 + _subject.hashCode();

    hashCode = hashCode * 8191 + ((isSet_sequence_no()) ? 131071 : 524287);
    if (isSet_sequence_no())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_sequence_no);

    hashCode = hashCode * 8191 + ((isSet_list_bool()) ? 131071 : 524287);
    if (isSet_list_bool())
      hashCode = hashCode * 8191 + _list_bool.hashCode();

    hashCode = hashCode * 8191 + ((isSet_list_i16()) ? 131071 : 524287);
    if (isSet_list_i16())
      hashCode = hashCode * 8191 + _list_i16.hashCode();

    hashCode = hashCode * 8191 + ((isSet_list_i32()) ? 131071 : 524287);
    if (isSet_list_i32())
      hashCode = hashCode * 8191 + _list_i32.hashCode();

    hashCode = hashCode * 8191 + ((isSet_list_i64()) ? 131071 : 524287);
    if (isSet_list_i64())
      hashCode = hashCode * 8191 + _list_i64.hashCode();

    hashCode = hashCode * 8191 + ((isSet_list_double()) ? 131071 : 524287);
    if (isSet_list_double())
      hashCode = hashCode * 8191 + _list_double.hashCode();

    hashCode = hashCode * 8191 + ((isSet_list_string()) ? 131071 : 524287);
    if (isSet_list_string())
      hashCode = hashCode * 8191 + _list_string.hashCode();

    hashCode = hashCode * 8191 + ((isSet_binary()) ? 131071 : 524287);
    if (isSet_binary())
      hashCode = hashCode * 8191 + _binary.hashCode();

    hashCode = hashCode * 8191 + ((isSet_payload()) ? 131071 : 524287);
    if (isSet_payload())
      hashCode = hashCode * 8191 + _payload.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Message other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSet_timestamp()).compareTo(other.isSet_timestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_timestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._timestamp, other._timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_sender_id()).compareTo(other.isSet_sender_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_sender_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._sender_id, other._sender_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_receiver_id()).compareTo(other.isSet_receiver_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_receiver_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._receiver_id, other._receiver_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_subject()).compareTo(other.isSet_subject());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_subject()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._subject, other._subject);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_sequence_no()).compareTo(other.isSet_sequence_no());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_sequence_no()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._sequence_no, other._sequence_no);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_list_bool()).compareTo(other.isSet_list_bool());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_list_bool()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._list_bool, other._list_bool);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_list_i16()).compareTo(other.isSet_list_i16());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_list_i16()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._list_i16, other._list_i16);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_list_i32()).compareTo(other.isSet_list_i32());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_list_i32()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._list_i32, other._list_i32);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_list_i64()).compareTo(other.isSet_list_i64());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_list_i64()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._list_i64, other._list_i64);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_list_double()).compareTo(other.isSet_list_double());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_list_double()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._list_double, other._list_double);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_list_string()).compareTo(other.isSet_list_string());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_list_string()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._list_string, other._list_string);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_binary()).compareTo(other.isSet_binary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_binary()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._binary, other._binary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_payload()).compareTo(other.isSet_payload());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_payload()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._payload, other._payload);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Message(");
    boolean first = true;

    sb.append("_timestamp:");
    if (this._timestamp == null) {
      sb.append("null");
    } else {
      sb.append(this._timestamp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_sender_id:");
    if (this._sender_id == null) {
      sb.append("null");
    } else {
      sb.append(this._sender_id);
    }
    first = false;
    if (isSet_receiver_id()) {
      if (!first) sb.append(", ");
      sb.append("_receiver_id:");
      if (this._receiver_id == null) {
        sb.append("null");
      } else {
        sb.append(this._receiver_id);
      }
      first = false;
    }
    if (isSet_subject()) {
      if (!first) sb.append(", ");
      sb.append("_subject:");
      if (this._subject == null) {
        sb.append("null");
      } else {
        sb.append(this._subject);
      }
      first = false;
    }
    if (isSet_sequence_no()) {
      if (!first) sb.append(", ");
      sb.append("_sequence_no:");
      sb.append(this._sequence_no);
      first = false;
    }
    if (isSet_list_bool()) {
      if (!first) sb.append(", ");
      sb.append("_list_bool:");
      if (this._list_bool == null) {
        sb.append("null");
      } else {
        sb.append(this._list_bool);
      }
      first = false;
    }
    if (isSet_list_i16()) {
      if (!first) sb.append(", ");
      sb.append("_list_i16:");
      if (this._list_i16 == null) {
        sb.append("null");
      } else {
        sb.append(this._list_i16);
      }
      first = false;
    }
    if (isSet_list_i32()) {
      if (!first) sb.append(", ");
      sb.append("_list_i32:");
      if (this._list_i32 == null) {
        sb.append("null");
      } else {
        sb.append(this._list_i32);
      }
      first = false;
    }
    if (isSet_list_i64()) {
      if (!first) sb.append(", ");
      sb.append("_list_i64:");
      if (this._list_i64 == null) {
        sb.append("null");
      } else {
        sb.append(this._list_i64);
      }
      first = false;
    }
    if (isSet_list_double()) {
      if (!first) sb.append(", ");
      sb.append("_list_double:");
      if (this._list_double == null) {
        sb.append("null");
      } else {
        sb.append(this._list_double);
      }
      first = false;
    }
    if (isSet_list_string()) {
      if (!first) sb.append(", ");
      sb.append("_list_string:");
      if (this._list_string == null) {
        sb.append("null");
      } else {
        sb.append(this._list_string);
      }
      first = false;
    }
    if (isSet_binary()) {
      if (!first) sb.append(", ");
      sb.append("_binary:");
      if (this._binary == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this._binary, sb);
      }
      first = false;
    }
    if (isSet_payload()) {
      if (!first) sb.append(", ");
      sb.append("_payload:");
      if (this._payload == null) {
        sb.append("null");
      } else {
        sb.append(this._payload);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (_timestamp == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_timestamp' was not present! Struct: " + toString());
    }
    if (_sender_id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_sender_id' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MessageStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MessageStandardScheme getScheme() {
      return new MessageStandardScheme();
    }
  }

  private static class MessageStandardScheme extends org.apache.thrift.scheme.StandardScheme<Message> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Message struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // _TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._timestamp = iprot.readString();
              struct.set_timestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // _SENDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._sender_id = iprot.readString();
              struct.set_sender_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // _RECEIVER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._receiver_id = iprot.readString();
              struct.set_receiver_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // _SUBJECT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._subject = iprot.readString();
              struct.set_subjectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // _SEQUENCE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct._sequence_no = iprot.readI64();
              struct.set_sequence_noIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // _LIST_BOOL
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct._list_bool = new java.util.ArrayList<java.lang.Boolean>(_list0.size);
                boolean _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readBool();
                  struct._list_bool.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.set_list_boolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // _LIST_I16
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct._list_i16 = new java.util.ArrayList<java.lang.Short>(_list3.size);
                short _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readI16();
                  struct._list_i16.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.set_list_i16IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // _LIST_I32
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct._list_i32 = new java.util.ArrayList<java.lang.Integer>(_list6.size);
                int _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = iprot.readI32();
                  struct._list_i32.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.set_list_i32IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // _LIST_I64
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                struct._list_i64 = new java.util.ArrayList<java.lang.Long>(_list9.size);
                long _elem10;
                for (int _i11 = 0; _i11 < _list9.size; ++_i11)
                {
                  _elem10 = iprot.readI64();
                  struct._list_i64.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.set_list_i64IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // _LIST_DOUBLE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
                struct._list_double = new java.util.ArrayList<java.lang.Double>(_list12.size);
                double _elem13;
                for (int _i14 = 0; _i14 < _list12.size; ++_i14)
                {
                  _elem13 = iprot.readDouble();
                  struct._list_double.add(_elem13);
                }
                iprot.readListEnd();
              }
              struct.set_list_doubleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // _LIST_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list15 = iprot.readListBegin();
                struct._list_string = new java.util.ArrayList<java.lang.String>(_list15.size);
                java.lang.String _elem16;
                for (int _i17 = 0; _i17 < _list15.size; ++_i17)
                {
                  _elem16 = iprot.readString();
                  struct._list_string.add(_elem16);
                }
                iprot.readListEnd();
              }
              struct.set_list_stringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // _BINARY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._binary = iprot.readBinary();
              struct.set_binaryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // _PAYLOAD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._payload = iprot.readString();
              struct.set_payloadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Message struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct._timestamp != null) {
        oprot.writeFieldBegin(_TIMESTAMP_FIELD_DESC);
        oprot.writeString(struct._timestamp);
        oprot.writeFieldEnd();
      }
      if (struct._sender_id != null) {
        oprot.writeFieldBegin(_SENDER_ID_FIELD_DESC);
        oprot.writeString(struct._sender_id);
        oprot.writeFieldEnd();
      }
      if (struct._receiver_id != null) {
        if (struct.isSet_receiver_id()) {
          oprot.writeFieldBegin(_RECEIVER_ID_FIELD_DESC);
          oprot.writeString(struct._receiver_id);
          oprot.writeFieldEnd();
        }
      }
      if (struct._subject != null) {
        if (struct.isSet_subject()) {
          oprot.writeFieldBegin(_SUBJECT_FIELD_DESC);
          oprot.writeString(struct._subject);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSet_sequence_no()) {
        oprot.writeFieldBegin(_SEQUENCE_NO_FIELD_DESC);
        oprot.writeI64(struct._sequence_no);
        oprot.writeFieldEnd();
      }
      if (struct._list_bool != null) {
        if (struct.isSet_list_bool()) {
          oprot.writeFieldBegin(_LIST_BOOL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, struct._list_bool.size()));
            for (boolean _iter18 : struct._list_bool)
            {
              oprot.writeBool(_iter18);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct._list_i16 != null) {
        if (struct.isSet_list_i16()) {
          oprot.writeFieldBegin(_LIST_I16_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, struct._list_i16.size()));
            for (short _iter19 : struct._list_i16)
            {
              oprot.writeI16(_iter19);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct._list_i32 != null) {
        if (struct.isSet_list_i32()) {
          oprot.writeFieldBegin(_LIST_I32_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct._list_i32.size()));
            for (int _iter20 : struct._list_i32)
            {
              oprot.writeI32(_iter20);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct._list_i64 != null) {
        if (struct.isSet_list_i64()) {
          oprot.writeFieldBegin(_LIST_I64_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct._list_i64.size()));
            for (long _iter21 : struct._list_i64)
            {
              oprot.writeI64(_iter21);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct._list_double != null) {
        if (struct.isSet_list_double()) {
          oprot.writeFieldBegin(_LIST_DOUBLE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct._list_double.size()));
            for (double _iter22 : struct._list_double)
            {
              oprot.writeDouble(_iter22);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct._list_string != null) {
        if (struct.isSet_list_string()) {
          oprot.writeFieldBegin(_LIST_STRING_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct._list_string.size()));
            for (java.lang.String _iter23 : struct._list_string)
            {
              oprot.writeString(_iter23);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct._binary != null) {
        if (struct.isSet_binary()) {
          oprot.writeFieldBegin(_BINARY_FIELD_DESC);
          oprot.writeBinary(struct._binary);
          oprot.writeFieldEnd();
        }
      }
      if (struct._payload != null) {
        if (struct.isSet_payload()) {
          oprot.writeFieldBegin(_PAYLOAD_FIELD_DESC);
          oprot.writeString(struct._payload);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MessageTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MessageTupleScheme getScheme() {
      return new MessageTupleScheme();
    }
  }

  private static class MessageTupleScheme extends org.apache.thrift.scheme.TupleScheme<Message> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Message struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct._timestamp);
      oprot.writeString(struct._sender_id);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSet_receiver_id()) {
        optionals.set(0);
      }
      if (struct.isSet_subject()) {
        optionals.set(1);
      }
      if (struct.isSet_sequence_no()) {
        optionals.set(2);
      }
      if (struct.isSet_list_bool()) {
        optionals.set(3);
      }
      if (struct.isSet_list_i16()) {
        optionals.set(4);
      }
      if (struct.isSet_list_i32()) {
        optionals.set(5);
      }
      if (struct.isSet_list_i64()) {
        optionals.set(6);
      }
      if (struct.isSet_list_double()) {
        optionals.set(7);
      }
      if (struct.isSet_list_string()) {
        optionals.set(8);
      }
      if (struct.isSet_binary()) {
        optionals.set(9);
      }
      if (struct.isSet_payload()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSet_receiver_id()) {
        oprot.writeString(struct._receiver_id);
      }
      if (struct.isSet_subject()) {
        oprot.writeString(struct._subject);
      }
      if (struct.isSet_sequence_no()) {
        oprot.writeI64(struct._sequence_no);
      }
      if (struct.isSet_list_bool()) {
        {
          oprot.writeI32(struct._list_bool.size());
          for (boolean _iter24 : struct._list_bool)
          {
            oprot.writeBool(_iter24);
          }
        }
      }
      if (struct.isSet_list_i16()) {
        {
          oprot.writeI32(struct._list_i16.size());
          for (short _iter25 : struct._list_i16)
          {
            oprot.writeI16(_iter25);
          }
        }
      }
      if (struct.isSet_list_i32()) {
        {
          oprot.writeI32(struct._list_i32.size());
          for (int _iter26 : struct._list_i32)
          {
            oprot.writeI32(_iter26);
          }
        }
      }
      if (struct.isSet_list_i64()) {
        {
          oprot.writeI32(struct._list_i64.size());
          for (long _iter27 : struct._list_i64)
          {
            oprot.writeI64(_iter27);
          }
        }
      }
      if (struct.isSet_list_double()) {
        {
          oprot.writeI32(struct._list_double.size());
          for (double _iter28 : struct._list_double)
          {
            oprot.writeDouble(_iter28);
          }
        }
      }
      if (struct.isSet_list_string()) {
        {
          oprot.writeI32(struct._list_string.size());
          for (java.lang.String _iter29 : struct._list_string)
          {
            oprot.writeString(_iter29);
          }
        }
      }
      if (struct.isSet_binary()) {
        oprot.writeBinary(struct._binary);
      }
      if (struct.isSet_payload()) {
        oprot.writeString(struct._payload);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Message struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct._timestamp = iprot.readString();
      struct.set_timestampIsSet(true);
      struct._sender_id = iprot.readString();
      struct.set_sender_idIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct._receiver_id = iprot.readString();
        struct.set_receiver_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct._subject = iprot.readString();
        struct.set_subjectIsSet(true);
      }
      if (incoming.get(2)) {
        struct._sequence_no = iprot.readI64();
        struct.set_sequence_noIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list30 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
          struct._list_bool = new java.util.ArrayList<java.lang.Boolean>(_list30.size);
          boolean _elem31;
          for (int _i32 = 0; _i32 < _list30.size; ++_i32)
          {
            _elem31 = iprot.readBool();
            struct._list_bool.add(_elem31);
          }
        }
        struct.set_list_boolIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list33 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, iprot.readI32());
          struct._list_i16 = new java.util.ArrayList<java.lang.Short>(_list33.size);
          short _elem34;
          for (int _i35 = 0; _i35 < _list33.size; ++_i35)
          {
            _elem34 = iprot.readI16();
            struct._list_i16.add(_elem34);
          }
        }
        struct.set_list_i16IsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list36 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct._list_i32 = new java.util.ArrayList<java.lang.Integer>(_list36.size);
          int _elem37;
          for (int _i38 = 0; _i38 < _list36.size; ++_i38)
          {
            _elem37 = iprot.readI32();
            struct._list_i32.add(_elem37);
          }
        }
        struct.set_list_i32IsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list39 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct._list_i64 = new java.util.ArrayList<java.lang.Long>(_list39.size);
          long _elem40;
          for (int _i41 = 0; _i41 < _list39.size; ++_i41)
          {
            _elem40 = iprot.readI64();
            struct._list_i64.add(_elem40);
          }
        }
        struct.set_list_i64IsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list42 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct._list_double = new java.util.ArrayList<java.lang.Double>(_list42.size);
          double _elem43;
          for (int _i44 = 0; _i44 < _list42.size; ++_i44)
          {
            _elem43 = iprot.readDouble();
            struct._list_double.add(_elem43);
          }
        }
        struct.set_list_doubleIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct._list_string = new java.util.ArrayList<java.lang.String>(_list45.size);
          java.lang.String _elem46;
          for (int _i47 = 0; _i47 < _list45.size; ++_i47)
          {
            _elem46 = iprot.readString();
            struct._list_string.add(_elem46);
          }
        }
        struct.set_list_stringIsSet(true);
      }
      if (incoming.get(9)) {
        struct._binary = iprot.readBinary();
        struct.set_binaryIsSet(true);
      }
      if (incoming.get(10)) {
        struct._payload = iprot.readString();
        struct.set_payloadIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

