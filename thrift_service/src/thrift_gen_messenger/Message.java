/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift_gen_messenger;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-01-15")
public class Message implements org.apache.thrift.TBase<Message, Message._Fields>, java.io.Serializable, Cloneable, Comparable<Message> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Message");

  private static final org.apache.thrift.protocol.TField _SENDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_sender_id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField _RECEIVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_receiver_id", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField _SUBJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("_subject", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField _SEQUENCE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("_sequence_no", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField _BOOL_FIELD_DESC = new org.apache.thrift.protocol.TField("_bool", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField _I16_FIELD_DESC = new org.apache.thrift.protocol.TField("_i16", org.apache.thrift.protocol.TType.I16, (short)6);
  private static final org.apache.thrift.protocol.TField _I32_FIELD_DESC = new org.apache.thrift.protocol.TField("_i32", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField _I64_FIELD_DESC = new org.apache.thrift.protocol.TField("_i64", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField _DOUBLE_FIELD_DESC = new org.apache.thrift.protocol.TField("_double", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField _STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("_string", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField _PAYLOAD_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("_payload_string", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField _PAYLOAD_BINARY_FIELD_DESC = new org.apache.thrift.protocol.TField("_payload_binary", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MessageStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MessageTupleSchemeFactory();

  public java.lang.String _sender_id; // required
  public java.lang.String _receiver_id; // required
  public java.lang.String _subject; // required
  public java.lang.String _sequence_no; // required
  public boolean _bool; // required
  public short _i16; // required
  public int _i32; // required
  public long _i64; // required
  public double _double; // required
  public java.lang.String _string; // required
  public java.lang.String _payload_string; // required
  public java.lang.String _payload_binary; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    _SENDER_ID((short)1, "_sender_id"),
    _RECEIVER_ID((short)2, "_receiver_id"),
    _SUBJECT((short)3, "_subject"),
    _SEQUENCE_NO((short)4, "_sequence_no"),
    _BOOL((short)5, "_bool"),
    _I16((short)6, "_i16"),
    _I32((short)7, "_i32"),
    _I64((short)8, "_i64"),
    _DOUBLE((short)9, "_double"),
    _STRING((short)10, "_string"),
    _PAYLOAD_STRING((short)11, "_payload_string"),
    _PAYLOAD_BINARY((short)12, "_payload_binary");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // _SENDER_ID
          return _SENDER_ID;
        case 2: // _RECEIVER_ID
          return _RECEIVER_ID;
        case 3: // _SUBJECT
          return _SUBJECT;
        case 4: // _SEQUENCE_NO
          return _SEQUENCE_NO;
        case 5: // _BOOL
          return _BOOL;
        case 6: // _I16
          return _I16;
        case 7: // _I32
          return _I32;
        case 8: // _I64
          return _I64;
        case 9: // _DOUBLE
          return _DOUBLE;
        case 10: // _STRING
          return _STRING;
        case 11: // _PAYLOAD_STRING
          return _PAYLOAD_STRING;
        case 12: // _PAYLOAD_BINARY
          return _PAYLOAD_BINARY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int ___BOOL_ISSET_ID = 0;
  private static final int ___I16_ISSET_ID = 1;
  private static final int ___I32_ISSET_ID = 2;
  private static final int ___I64_ISSET_ID = 3;
  private static final int ___DOUBLE_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields._PAYLOAD_BINARY};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields._SENDER_ID, new org.apache.thrift.meta_data.FieldMetaData("_sender_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._RECEIVER_ID, new org.apache.thrift.meta_data.FieldMetaData("_receiver_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._SUBJECT, new org.apache.thrift.meta_data.FieldMetaData("_subject", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._SEQUENCE_NO, new org.apache.thrift.meta_data.FieldMetaData("_sequence_no", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._BOOL, new org.apache.thrift.meta_data.FieldMetaData("_bool", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields._I16, new org.apache.thrift.meta_data.FieldMetaData("_i16", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields._I32, new org.apache.thrift.meta_data.FieldMetaData("_i32", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields._I64, new org.apache.thrift.meta_data.FieldMetaData("_i64", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields._DOUBLE, new org.apache.thrift.meta_data.FieldMetaData("_double", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields._STRING, new org.apache.thrift.meta_data.FieldMetaData("_string", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._PAYLOAD_STRING, new org.apache.thrift.meta_data.FieldMetaData("_payload_string", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields._PAYLOAD_BINARY, new org.apache.thrift.meta_data.FieldMetaData("_payload_binary", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Message.class, metaDataMap);
  }

  public Message() {
  }

  public Message(
    java.lang.String _sender_id,
    java.lang.String _receiver_id,
    java.lang.String _subject,
    java.lang.String _sequence_no,
    boolean _bool,
    short _i16,
    int _i32,
    long _i64,
    double _double,
    java.lang.String _string,
    java.lang.String _payload_string)
  {
    this();
    this._sender_id = _sender_id;
    this._receiver_id = _receiver_id;
    this._subject = _subject;
    this._sequence_no = _sequence_no;
    this._bool = _bool;
    set_boolIsSet(true);
    this._i16 = _i16;
    set_i16IsSet(true);
    this._i32 = _i32;
    set_i32IsSet(true);
    this._i64 = _i64;
    set_i64IsSet(true);
    this._double = _double;
    set_doubleIsSet(true);
    this._string = _string;
    this._payload_string = _payload_string;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Message(Message other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSet_sender_id()) {
      this._sender_id = other._sender_id;
    }
    if (other.isSet_receiver_id()) {
      this._receiver_id = other._receiver_id;
    }
    if (other.isSet_subject()) {
      this._subject = other._subject;
    }
    if (other.isSet_sequence_no()) {
      this._sequence_no = other._sequence_no;
    }
    this._bool = other._bool;
    this._i16 = other._i16;
    this._i32 = other._i32;
    this._i64 = other._i64;
    this._double = other._double;
    if (other.isSet_string()) {
      this._string = other._string;
    }
    if (other.isSet_payload_string()) {
      this._payload_string = other._payload_string;
    }
    if (other.isSet_payload_binary()) {
      this._payload_binary = other._payload_binary;
    }
  }

  public Message deepCopy() {
    return new Message(this);
  }

  @Override
  public void clear() {
    this._sender_id = null;
    this._receiver_id = null;
    this._subject = null;
    this._sequence_no = null;
    set_boolIsSet(false);
    this._bool = false;
    set_i16IsSet(false);
    this._i16 = 0;
    set_i32IsSet(false);
    this._i32 = 0;
    set_i64IsSet(false);
    this._i64 = 0;
    set_doubleIsSet(false);
    this._double = 0.0;
    this._string = null;
    this._payload_string = null;
    this._payload_binary = null;
  }

  public java.lang.String get_sender_id() {
    return this._sender_id;
  }

  public Message set_sender_id(java.lang.String _sender_id) {
    this._sender_id = _sender_id;
    return this;
  }

  public void unset_sender_id() {
    this._sender_id = null;
  }

  /** Returns true if field _sender_id is set (has been assigned a value) and false otherwise */
  public boolean isSet_sender_id() {
    return this._sender_id != null;
  }

  public void set_sender_idIsSet(boolean value) {
    if (!value) {
      this._sender_id = null;
    }
  }

  public java.lang.String get_receiver_id() {
    return this._receiver_id;
  }

  public Message set_receiver_id(java.lang.String _receiver_id) {
    this._receiver_id = _receiver_id;
    return this;
  }

  public void unset_receiver_id() {
    this._receiver_id = null;
  }

  /** Returns true if field _receiver_id is set (has been assigned a value) and false otherwise */
  public boolean isSet_receiver_id() {
    return this._receiver_id != null;
  }

  public void set_receiver_idIsSet(boolean value) {
    if (!value) {
      this._receiver_id = null;
    }
  }

  public java.lang.String get_subject() {
    return this._subject;
  }

  public Message set_subject(java.lang.String _subject) {
    this._subject = _subject;
    return this;
  }

  public void unset_subject() {
    this._subject = null;
  }

  /** Returns true if field _subject is set (has been assigned a value) and false otherwise */
  public boolean isSet_subject() {
    return this._subject != null;
  }

  public void set_subjectIsSet(boolean value) {
    if (!value) {
      this._subject = null;
    }
  }

  public java.lang.String get_sequence_no() {
    return this._sequence_no;
  }

  public Message set_sequence_no(java.lang.String _sequence_no) {
    this._sequence_no = _sequence_no;
    return this;
  }

  public void unset_sequence_no() {
    this._sequence_no = null;
  }

  /** Returns true if field _sequence_no is set (has been assigned a value) and false otherwise */
  public boolean isSet_sequence_no() {
    return this._sequence_no != null;
  }

  public void set_sequence_noIsSet(boolean value) {
    if (!value) {
      this._sequence_no = null;
    }
  }

  public boolean is_bool() {
    return this._bool;
  }

  public Message set_bool(boolean _bool) {
    this._bool = _bool;
    set_boolIsSet(true);
    return this;
  }

  public void unset_bool() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___BOOL_ISSET_ID);
  }

  /** Returns true if field _bool is set (has been assigned a value) and false otherwise */
  public boolean isSet_bool() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___BOOL_ISSET_ID);
  }

  public void set_boolIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___BOOL_ISSET_ID, value);
  }

  public short get_i16() {
    return this._i16;
  }

  public Message set_i16(short _i16) {
    this._i16 = _i16;
    set_i16IsSet(true);
    return this;
  }

  public void unset_i16() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___I16_ISSET_ID);
  }

  /** Returns true if field _i16 is set (has been assigned a value) and false otherwise */
  public boolean isSet_i16() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___I16_ISSET_ID);
  }

  public void set_i16IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___I16_ISSET_ID, value);
  }

  public int get_i32() {
    return this._i32;
  }

  public Message set_i32(int _i32) {
    this._i32 = _i32;
    set_i32IsSet(true);
    return this;
  }

  public void unset_i32() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___I32_ISSET_ID);
  }

  /** Returns true if field _i32 is set (has been assigned a value) and false otherwise */
  public boolean isSet_i32() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___I32_ISSET_ID);
  }

  public void set_i32IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___I32_ISSET_ID, value);
  }

  public long get_i64() {
    return this._i64;
  }

  public Message set_i64(long _i64) {
    this._i64 = _i64;
    set_i64IsSet(true);
    return this;
  }

  public void unset_i64() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___I64_ISSET_ID);
  }

  /** Returns true if field _i64 is set (has been assigned a value) and false otherwise */
  public boolean isSet_i64() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___I64_ISSET_ID);
  }

  public void set_i64IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___I64_ISSET_ID, value);
  }

  public double get_double() {
    return this._double;
  }

  public Message set_double(double _double) {
    this._double = _double;
    set_doubleIsSet(true);
    return this;
  }

  public void unset_double() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, ___DOUBLE_ISSET_ID);
  }

  /** Returns true if field _double is set (has been assigned a value) and false otherwise */
  public boolean isSet_double() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, ___DOUBLE_ISSET_ID);
  }

  public void set_doubleIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, ___DOUBLE_ISSET_ID, value);
  }

  public java.lang.String get_string() {
    return this._string;
  }

  public Message set_string(java.lang.String _string) {
    this._string = _string;
    return this;
  }

  public void unset_string() {
    this._string = null;
  }

  /** Returns true if field _string is set (has been assigned a value) and false otherwise */
  public boolean isSet_string() {
    return this._string != null;
  }

  public void set_stringIsSet(boolean value) {
    if (!value) {
      this._string = null;
    }
  }

  public java.lang.String get_payload_string() {
    return this._payload_string;
  }

  public Message set_payload_string(java.lang.String _payload_string) {
    this._payload_string = _payload_string;
    return this;
  }

  public void unset_payload_string() {
    this._payload_string = null;
  }

  /** Returns true if field _payload_string is set (has been assigned a value) and false otherwise */
  public boolean isSet_payload_string() {
    return this._payload_string != null;
  }

  public void set_payload_stringIsSet(boolean value) {
    if (!value) {
      this._payload_string = null;
    }
  }

  public java.lang.String get_payload_binary() {
    return this._payload_binary;
  }

  public Message set_payload_binary(java.lang.String _payload_binary) {
    this._payload_binary = _payload_binary;
    return this;
  }

  public void unset_payload_binary() {
    this._payload_binary = null;
  }

  /** Returns true if field _payload_binary is set (has been assigned a value) and false otherwise */
  public boolean isSet_payload_binary() {
    return this._payload_binary != null;
  }

  public void set_payload_binaryIsSet(boolean value) {
    if (!value) {
      this._payload_binary = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case _SENDER_ID:
      if (value == null) {
        unset_sender_id();
      } else {
        set_sender_id((java.lang.String)value);
      }
      break;

    case _RECEIVER_ID:
      if (value == null) {
        unset_receiver_id();
      } else {
        set_receiver_id((java.lang.String)value);
      }
      break;

    case _SUBJECT:
      if (value == null) {
        unset_subject();
      } else {
        set_subject((java.lang.String)value);
      }
      break;

    case _SEQUENCE_NO:
      if (value == null) {
        unset_sequence_no();
      } else {
        set_sequence_no((java.lang.String)value);
      }
      break;

    case _BOOL:
      if (value == null) {
        unset_bool();
      } else {
        set_bool((java.lang.Boolean)value);
      }
      break;

    case _I16:
      if (value == null) {
        unset_i16();
      } else {
        set_i16((java.lang.Short)value);
      }
      break;

    case _I32:
      if (value == null) {
        unset_i32();
      } else {
        set_i32((java.lang.Integer)value);
      }
      break;

    case _I64:
      if (value == null) {
        unset_i64();
      } else {
        set_i64((java.lang.Long)value);
      }
      break;

    case _DOUBLE:
      if (value == null) {
        unset_double();
      } else {
        set_double((java.lang.Double)value);
      }
      break;

    case _STRING:
      if (value == null) {
        unset_string();
      } else {
        set_string((java.lang.String)value);
      }
      break;

    case _PAYLOAD_STRING:
      if (value == null) {
        unset_payload_string();
      } else {
        set_payload_string((java.lang.String)value);
      }
      break;

    case _PAYLOAD_BINARY:
      if (value == null) {
        unset_payload_binary();
      } else {
        set_payload_binary((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case _SENDER_ID:
      return get_sender_id();

    case _RECEIVER_ID:
      return get_receiver_id();

    case _SUBJECT:
      return get_subject();

    case _SEQUENCE_NO:
      return get_sequence_no();

    case _BOOL:
      return is_bool();

    case _I16:
      return get_i16();

    case _I32:
      return get_i32();

    case _I64:
      return get_i64();

    case _DOUBLE:
      return get_double();

    case _STRING:
      return get_string();

    case _PAYLOAD_STRING:
      return get_payload_string();

    case _PAYLOAD_BINARY:
      return get_payload_binary();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case _SENDER_ID:
      return isSet_sender_id();
    case _RECEIVER_ID:
      return isSet_receiver_id();
    case _SUBJECT:
      return isSet_subject();
    case _SEQUENCE_NO:
      return isSet_sequence_no();
    case _BOOL:
      return isSet_bool();
    case _I16:
      return isSet_i16();
    case _I32:
      return isSet_i32();
    case _I64:
      return isSet_i64();
    case _DOUBLE:
      return isSet_double();
    case _STRING:
      return isSet_string();
    case _PAYLOAD_STRING:
      return isSet_payload_string();
    case _PAYLOAD_BINARY:
      return isSet_payload_binary();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Message)
      return this.equals((Message)that);
    return false;
  }

  public boolean equals(Message that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present__sender_id = true && this.isSet_sender_id();
    boolean that_present__sender_id = true && that.isSet_sender_id();
    if (this_present__sender_id || that_present__sender_id) {
      if (!(this_present__sender_id && that_present__sender_id))
        return false;
      if (!this._sender_id.equals(that._sender_id))
        return false;
    }

    boolean this_present__receiver_id = true && this.isSet_receiver_id();
    boolean that_present__receiver_id = true && that.isSet_receiver_id();
    if (this_present__receiver_id || that_present__receiver_id) {
      if (!(this_present__receiver_id && that_present__receiver_id))
        return false;
      if (!this._receiver_id.equals(that._receiver_id))
        return false;
    }

    boolean this_present__subject = true && this.isSet_subject();
    boolean that_present__subject = true && that.isSet_subject();
    if (this_present__subject || that_present__subject) {
      if (!(this_present__subject && that_present__subject))
        return false;
      if (!this._subject.equals(that._subject))
        return false;
    }

    boolean this_present__sequence_no = true && this.isSet_sequence_no();
    boolean that_present__sequence_no = true && that.isSet_sequence_no();
    if (this_present__sequence_no || that_present__sequence_no) {
      if (!(this_present__sequence_no && that_present__sequence_no))
        return false;
      if (!this._sequence_no.equals(that._sequence_no))
        return false;
    }

    boolean this_present__bool = true;
    boolean that_present__bool = true;
    if (this_present__bool || that_present__bool) {
      if (!(this_present__bool && that_present__bool))
        return false;
      if (this._bool != that._bool)
        return false;
    }

    boolean this_present__i16 = true;
    boolean that_present__i16 = true;
    if (this_present__i16 || that_present__i16) {
      if (!(this_present__i16 && that_present__i16))
        return false;
      if (this._i16 != that._i16)
        return false;
    }

    boolean this_present__i32 = true;
    boolean that_present__i32 = true;
    if (this_present__i32 || that_present__i32) {
      if (!(this_present__i32 && that_present__i32))
        return false;
      if (this._i32 != that._i32)
        return false;
    }

    boolean this_present__i64 = true;
    boolean that_present__i64 = true;
    if (this_present__i64 || that_present__i64) {
      if (!(this_present__i64 && that_present__i64))
        return false;
      if (this._i64 != that._i64)
        return false;
    }

    boolean this_present__double = true;
    boolean that_present__double = true;
    if (this_present__double || that_present__double) {
      if (!(this_present__double && that_present__double))
        return false;
      if (this._double != that._double)
        return false;
    }

    boolean this_present__string = true && this.isSet_string();
    boolean that_present__string = true && that.isSet_string();
    if (this_present__string || that_present__string) {
      if (!(this_present__string && that_present__string))
        return false;
      if (!this._string.equals(that._string))
        return false;
    }

    boolean this_present__payload_string = true && this.isSet_payload_string();
    boolean that_present__payload_string = true && that.isSet_payload_string();
    if (this_present__payload_string || that_present__payload_string) {
      if (!(this_present__payload_string && that_present__payload_string))
        return false;
      if (!this._payload_string.equals(that._payload_string))
        return false;
    }

    boolean this_present__payload_binary = true && this.isSet_payload_binary();
    boolean that_present__payload_binary = true && that.isSet_payload_binary();
    if (this_present__payload_binary || that_present__payload_binary) {
      if (!(this_present__payload_binary && that_present__payload_binary))
        return false;
      if (!this._payload_binary.equals(that._payload_binary))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSet_sender_id()) ? 131071 : 524287);
    if (isSet_sender_id())
      hashCode = hashCode * 8191 + _sender_id.hashCode();

    hashCode = hashCode * 8191 + ((isSet_receiver_id()) ? 131071 : 524287);
    if (isSet_receiver_id())
      hashCode = hashCode * 8191 + _receiver_id.hashCode();

    hashCode = hashCode * 8191 + ((isSet_subject()) ? 131071 : 524287);
    if (isSet_subject())
      hashCode = hashCode * 8191 + _subject.hashCode();

    hashCode = hashCode * 8191 + ((isSet_sequence_no()) ? 131071 : 524287);
    if (isSet_sequence_no())
      hashCode = hashCode * 8191 + _sequence_no.hashCode();

    hashCode = hashCode * 8191 + ((_bool) ? 131071 : 524287);

    hashCode = hashCode * 8191 + _i16;

    hashCode = hashCode * 8191 + _i32;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_i64);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(_double);

    hashCode = hashCode * 8191 + ((isSet_string()) ? 131071 : 524287);
    if (isSet_string())
      hashCode = hashCode * 8191 + _string.hashCode();

    hashCode = hashCode * 8191 + ((isSet_payload_string()) ? 131071 : 524287);
    if (isSet_payload_string())
      hashCode = hashCode * 8191 + _payload_string.hashCode();

    hashCode = hashCode * 8191 + ((isSet_payload_binary()) ? 131071 : 524287);
    if (isSet_payload_binary())
      hashCode = hashCode * 8191 + _payload_binary.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Message other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSet_sender_id()).compareTo(other.isSet_sender_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_sender_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._sender_id, other._sender_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_receiver_id()).compareTo(other.isSet_receiver_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_receiver_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._receiver_id, other._receiver_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_subject()).compareTo(other.isSet_subject());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_subject()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._subject, other._subject);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_sequence_no()).compareTo(other.isSet_sequence_no());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_sequence_no()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._sequence_no, other._sequence_no);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_bool()).compareTo(other.isSet_bool());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_bool()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._bool, other._bool);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_i16()).compareTo(other.isSet_i16());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_i16()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._i16, other._i16);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_i32()).compareTo(other.isSet_i32());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_i32()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._i32, other._i32);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_i64()).compareTo(other.isSet_i64());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_i64()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._i64, other._i64);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_double()).compareTo(other.isSet_double());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_double()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._double, other._double);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_string()).compareTo(other.isSet_string());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_string()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._string, other._string);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_payload_string()).compareTo(other.isSet_payload_string());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_payload_string()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._payload_string, other._payload_string);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSet_payload_binary()).compareTo(other.isSet_payload_binary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_payload_binary()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._payload_binary, other._payload_binary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Message(");
    boolean first = true;

    sb.append("_sender_id:");
    if (this._sender_id == null) {
      sb.append("null");
    } else {
      sb.append(this._sender_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_receiver_id:");
    if (this._receiver_id == null) {
      sb.append("null");
    } else {
      sb.append(this._receiver_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_subject:");
    if (this._subject == null) {
      sb.append("null");
    } else {
      sb.append(this._subject);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_sequence_no:");
    if (this._sequence_no == null) {
      sb.append("null");
    } else {
      sb.append(this._sequence_no);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_bool:");
    sb.append(this._bool);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_i16:");
    sb.append(this._i16);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_i32:");
    sb.append(this._i32);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_i64:");
    sb.append(this._i64);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_double:");
    sb.append(this._double);
    first = false;
    if (!first) sb.append(", ");
    sb.append("_string:");
    if (this._string == null) {
      sb.append("null");
    } else {
      sb.append(this._string);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("_payload_string:");
    if (this._payload_string == null) {
      sb.append("null");
    } else {
      sb.append(this._payload_string);
    }
    first = false;
    if (isSet_payload_binary()) {
      if (!first) sb.append(", ");
      sb.append("_payload_binary:");
      if (this._payload_binary == null) {
        sb.append("null");
      } else {
        sb.append(this._payload_binary);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (_sender_id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_sender_id' was not present! Struct: " + toString());
    }
    if (_receiver_id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_receiver_id' was not present! Struct: " + toString());
    }
    if (_subject == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_subject' was not present! Struct: " + toString());
    }
    if (_sequence_no == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_sequence_no' was not present! Struct: " + toString());
    }
    // alas, we cannot check '_bool' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check '_i16' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check '_i32' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check '_i64' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check '_double' because it's a primitive and you chose the non-beans generator.
    if (_string == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_string' was not present! Struct: " + toString());
    }
    if (_payload_string == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field '_payload_string' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MessageStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MessageStandardScheme getScheme() {
      return new MessageStandardScheme();
    }
  }

  private static class MessageStandardScheme extends org.apache.thrift.scheme.StandardScheme<Message> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Message struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // _SENDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._sender_id = iprot.readString();
              struct.set_sender_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // _RECEIVER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._receiver_id = iprot.readString();
              struct.set_receiver_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // _SUBJECT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._subject = iprot.readString();
              struct.set_subjectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // _SEQUENCE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._sequence_no = iprot.readString();
              struct.set_sequence_noIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // _BOOL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct._bool = iprot.readBool();
              struct.set_boolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // _I16
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct._i16 = iprot.readI16();
              struct.set_i16IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // _I32
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct._i32 = iprot.readI32();
              struct.set_i32IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // _I64
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct._i64 = iprot.readI64();
              struct.set_i64IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // _DOUBLE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct._double = iprot.readDouble();
              struct.set_doubleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // _STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._string = iprot.readString();
              struct.set_stringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // _PAYLOAD_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._payload_string = iprot.readString();
              struct.set_payload_stringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // _PAYLOAD_BINARY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._payload_binary = iprot.readString();
              struct.set_payload_binaryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSet_bool()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field '_bool' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSet_i16()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field '_i16' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSet_i32()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field '_i32' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSet_i64()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field '_i64' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSet_double()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field '_double' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Message struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct._sender_id != null) {
        oprot.writeFieldBegin(_SENDER_ID_FIELD_DESC);
        oprot.writeString(struct._sender_id);
        oprot.writeFieldEnd();
      }
      if (struct._receiver_id != null) {
        oprot.writeFieldBegin(_RECEIVER_ID_FIELD_DESC);
        oprot.writeString(struct._receiver_id);
        oprot.writeFieldEnd();
      }
      if (struct._subject != null) {
        oprot.writeFieldBegin(_SUBJECT_FIELD_DESC);
        oprot.writeString(struct._subject);
        oprot.writeFieldEnd();
      }
      if (struct._sequence_no != null) {
        oprot.writeFieldBegin(_SEQUENCE_NO_FIELD_DESC);
        oprot.writeString(struct._sequence_no);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(_BOOL_FIELD_DESC);
      oprot.writeBool(struct._bool);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_I16_FIELD_DESC);
      oprot.writeI16(struct._i16);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_I32_FIELD_DESC);
      oprot.writeI32(struct._i32);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_I64_FIELD_DESC);
      oprot.writeI64(struct._i64);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(_DOUBLE_FIELD_DESC);
      oprot.writeDouble(struct._double);
      oprot.writeFieldEnd();
      if (struct._string != null) {
        oprot.writeFieldBegin(_STRING_FIELD_DESC);
        oprot.writeString(struct._string);
        oprot.writeFieldEnd();
      }
      if (struct._payload_string != null) {
        oprot.writeFieldBegin(_PAYLOAD_STRING_FIELD_DESC);
        oprot.writeString(struct._payload_string);
        oprot.writeFieldEnd();
      }
      if (struct._payload_binary != null) {
        if (struct.isSet_payload_binary()) {
          oprot.writeFieldBegin(_PAYLOAD_BINARY_FIELD_DESC);
          oprot.writeString(struct._payload_binary);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MessageTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MessageTupleScheme getScheme() {
      return new MessageTupleScheme();
    }
  }

  private static class MessageTupleScheme extends org.apache.thrift.scheme.TupleScheme<Message> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Message struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct._sender_id);
      oprot.writeString(struct._receiver_id);
      oprot.writeString(struct._subject);
      oprot.writeString(struct._sequence_no);
      oprot.writeBool(struct._bool);
      oprot.writeI16(struct._i16);
      oprot.writeI32(struct._i32);
      oprot.writeI64(struct._i64);
      oprot.writeDouble(struct._double);
      oprot.writeString(struct._string);
      oprot.writeString(struct._payload_string);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSet_payload_binary()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSet_payload_binary()) {
        oprot.writeString(struct._payload_binary);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Message struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct._sender_id = iprot.readString();
      struct.set_sender_idIsSet(true);
      struct._receiver_id = iprot.readString();
      struct.set_receiver_idIsSet(true);
      struct._subject = iprot.readString();
      struct.set_subjectIsSet(true);
      struct._sequence_no = iprot.readString();
      struct.set_sequence_noIsSet(true);
      struct._bool = iprot.readBool();
      struct.set_boolIsSet(true);
      struct._i16 = iprot.readI16();
      struct.set_i16IsSet(true);
      struct._i32 = iprot.readI32();
      struct.set_i32IsSet(true);
      struct._i64 = iprot.readI64();
      struct.set_i64IsSet(true);
      struct._double = iprot.readDouble();
      struct.set_doubleIsSet(true);
      struct._string = iprot.readString();
      struct.set_stringIsSet(true);
      struct._payload_string = iprot.readString();
      struct.set_payload_stringIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct._payload_binary = iprot.readString();
        struct.set_payload_binaryIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

